<?php
namespace App\Http\Controllers\Observer\Observers;

use App\Http\Controllers\Observer\Contracts\ObserverInterface;
use App\Http\Controllers\Observer\Events\UserRegisteredEvent;
use App\Http\Controllers\Observer\Events\BookingStatusChangedEvent;
use App\Http\Controllers\Observer\Events\ReportGeneratedEvent;
use Illuminate\Support\Facades\Log;

class AdminNotificationObserver implements ObserverInterface
{
    public function getName(): string
    {
        return 'AdminNotificationObserver';
    }

    public function update($eventData): void
    {
        Log::info("AdminNotificationObserver processing event: " . get_class($eventData));

        try {
            switch (true) {
                case $eventData instanceof UserRegisteredEvent:
                    $this->notifyAdminsNewUser($eventData);
                    break;
                    
                case $eventData instanceof BookingStatusChangedEvent:
                    $this->notifyAdminsBookingStatusChange($eventData);
                    break;
                    
                case $eventData instanceof ReportGeneratedEvent:
                    $this->notifyAdminsReportGenerated($eventData);
                    break;
            }
        } catch (\Exception $e) {
            Log::error("AdminNotificationObserver failed: " . $e->getMessage());
        }
    }

    private function notifyAdminsNewUser(UserRegisteredEvent $event): void
    {
        $user = $event->getUser();
        
        $notification = [
            'type' => 'new_user_registered',
            'title' => 'New User Registration',
            'message' => "New user {$user->name} ({$user->email}) has registered",
            'priority' => 'low',
            'created_at' => now()
        ];

        Log::info("Admin notification: New user registered", $notification);
    }

    private function notifyAdminsBookingStatusChange(BookingStatusChangedEvent $event): void
    {
        $booking = $event->getBooking();
        
        $importantStatuses = ['cancelled', 'completed', 'active'];
        
        if (in_array($event->getNewStatus(), $importantStatuses)) {
            $notification = [
                'type' => 'booking_status_changed',
                'title' => 'Booking Status Updated',
                'message' => "Booking #{$booking->id} status changed from {$event->getOldStatus()} to {$event->getNewStatus()}",
                'priority' => 'medium',
                'created_at' => now()
            ];

            Log::info("Admin notification: Booking status changed", $notification);
        }
    }

    private function notifyAdminsReportGenerated(ReportGeneratedEvent $event): void
    {
        $notification = [
            'type' => 'report_generated',
            'title' => 'Report Generated',
            'message' => "Report of type '{$event->getReportType()}' was generated by {$event->getGeneratedBy()->name}",
            'priority' => 'low',
            'created_at' => now()
        ];

        Log::info("Admin notification: Report generated", $notification);
    }
}